# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: Node.js Package

on:
  workflow_dispatch:
    
  #schedule:
  #  - cron: '*/60 * * * *'

jobs:
  check:
    outputs:
      version: ${{ steps.step1.outputs.version }}

    runs-on: ubuntu-latest
    steps:
      - id: step1
        run: |
          releaseVersionName=$(curl https://api.github.com/repos/june07/peertube-node/releases/latest -o - | jq .name);
          peertubeReleaseVersionName=$(curl https://api.github.com/repos/Chocobozzz/PeerTube/releases/latest -o - | jq .name);
          
          [[ $peertubeReleaseVersionName =~ [0-9]+\.[0-9]+\.[0-9]+ ]]
          peertubeReleaseVersion=${BASH_REMATCH[0]}
          echo "Setting version to $peertubeReleaseVersion"
          echo "::set-output name=version::$peertubeReleaseVersion"

          echo "Version name from package.json is $releaseVersionName"
          echo "Version name from peertube release is $peertubeReleaseVersionName"
          if [ $releaseVersionName == $peertubeReleaseVersionName ]; then
          echo "No version change detected, exiting."
            exit 1;
          else
            echo "Version name mismatch found, running additional jobs."
            exit 0;
          fi

  bump:
    outputs:
      ref: ${{ steps.step1.outputs.ref }}
    needs: check
    runs-on: ubuntu-latest
    steps:
      - id: step1
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let response = await github.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'package.json'
            })
            let package_json = Buffer.from(response.data.content, 'base64').toString()
            package_json = JSON.parse(package_json)
            package_json.version = "${{ needs.check.outputs.version }}"
            response = await github.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'package.json',
              message: 'automated version bump',
              content: Buffer.from(JSON.stringify(package_json, null, 2)).toString('base64'),
              sha: response.data.sha,
              tag_name: "${{ needs.check.outputs.version }}"
            })
            console.log(`::set-output name=ref::${response.data.commit.sha}`)

  build:
    needs: bump
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          ref: "${{ needs.bump.outputs.ref }}"
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - run: npm ci
      - run: npm build

  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: https://registry.npmjs.org/
      - run: npm ci
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}

  publish-gpr:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: https://npm.pkg.github.com/
          scope: '@june07'
      - run: npm ci
      - run: |
          node <<EOF
            const fs = require('fs').promises;
            fs.readFile('package.json', 'utf8').then(data => JSON.parse(data)).then(json => {
              console.log(json);
                json.name = `@june07/${json.name}`;
                console.info('Package name changed to %s', json.name);
                return fs.writeFile('package.json', JSON.stringify(json), 'utf8');
            }).catch(error => {
                console.error(error);
                process.exit(1);
            });
          EOF
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  release:
    needs: [ check, publish-npm ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ needs.check.outputs.version }}"
            })
